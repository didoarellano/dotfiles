#
# dotzsh : https://github.com/dotphiles/dotzsh
#
# A theme based on Steve Losh's prompt with VCS_INFO integration
# Tweaked with solarized and zenburn colors for 256/16 color modes
#
# Authors:
#   Ben O'Hara <bohara@gmail.com>
#

prompt_dotphiles_help () {
  cat <<'EOH'

General Look

  user at host in ~
   %

Options

  You can change the colours of the theme.

  % prompt dotphiles [<theme> [<colour1> ]

                 theme   : dark or light
                 colour1 : [user] at [host]

  The defaults are dark and green

Example

  prompt dotphiles soldark red
  prompt dotphiles sollight orange
  prompt dotphiles zenburn orange

Colors

   yellow orange red magenta violet blue cyan green

EOH
}

function prompt_dotphiles_precmd {
  if [[ -n "$__PROMPT_dotphiles_VCS_UPDATE" ]] ; then
    # Check for untracked files or updated submodules since vcs_info doesn't.
    if [[ ! -z $(git ls-files --other --exclude-standard 2> /dev/null) ]]; then
      __PROMPT_dotphiles_VCS_UPDATE=1
      fmt_branch="%{$prompt_reset%}$bropen%s:%{$prompt_orange%}%b%{$prompt_reset%}${brclose} %{$prompt_green%}${dirty}%{$prompt_reset%}%u%c%m"
    else
      fmt_branch="%{$prompt_reset%}$bropen%s:%{$prompt_orange%}%b%{$prompt_reset%}${brclose} %u%c%m"
    fi
    zstyle ':vcs_info:*:prompt:*' formats "${fmt_branch}"

    vcs_info 'prompt'
    __PROMPT_dotphiles_VCS_UPDATE=''
  fi
}

function prompt_dotphiles_preexec {
  case "$(history $HISTCMD)" in
    (*git*)
      __PROMPT_dotphiles_VCS_UPDATE=1
    ;;
    (*svn*)
      __PROMPT_dotphiles_VCS_UPDATE=1
    ;;
  esac
}

function prompt_dotphiles_chpwd {
  __PROMPT_dotphiles_VCS_UPDATE=1
}

# Show remote ref name and number of commits ahead-of or behind
function +vi-git-st() {
  local ahead behind remote remsplit absplit
  local -a gitstatus

  # Are we on a remote-tracking branch?
  remote="${$(git rev-parse --verify ${hook_com[branch]}@{upstream} \
    --symbolic-full-name 2>/dev/null)/refs\/remotes\/}"

  if [[ -n ${remote} ]] ; then
    # for git prior to 1.7
    # ahead=$(git rev-list origin/${hook_com[branch]}..HEAD | wc -l)
    ahead=$(git rev-list ${hook_com[branch]}@{upstream}..HEAD 2>/dev/null | wc -l)
    (( $ahead )) && gitstatus+=( "%{$prompt_green%}${promptahead}${ahead}%{$prompt_reset%}" )

    # for git prior to 1.7
    # behind=$(git rev-list HEAD..origin/${hook_com[branch]} | wc -l)
    behind=$(git rev-list HEAD..${hook_com[branch]}@{upstream} 2>/dev/null | wc -l)
    (( $behind )) && gitstatus+=( "%{$prompt_red%}${promptbehind}${behind}%{$prompt_reset%}" )

    if [[ ! -z $remote ]]; then
        remsplit=$remotetrack
    fi

    if [[ ! -z $gitstatus ]]; then
        absplit=":"
    fi

    hook_com[branch]="${hook_com[branch]}%{$prompt_reset%}${remsplit}%{$prompt_yellow%}${remote}%{$prompt_reset%}${absplit}${(j:/:)gitstatus}"
  fi

  unset remsplit absplit

}

# Show count of stashed changes
function +vi-git-stash() {
  local -a stashes

  if [[ -s ${hook_com[base]}/.git/refs/stash ]] ; then
    stashes=$(git stash list 2>/dev/null | wc -l)
    hook_com[misc]+=" ${bropen}%{$prompt_dull%}${stashes} stashed%{$prompt_reset%}${brclose}"
  fi
}

function prompt_dotphiles_setup {
  setopt LOCAL_OPTIONS
  unsetopt XTRACE KSH_ARRAYS
  prompt_opts=(cr percent subst)

  # Check for the minimum supported version.
  min_zsh_version='4.3.10'
  if autoload -Uz is-at-least && is-at-least "$min_zsh_version"; then
    autoload -Uz add-zsh-hook
    autoload -Uz vcs_info
    add-zsh-hook precmd prompt_dotphiles_precmd
    add-zsh-hook preexec prompt_dotphiles_preexec
    add-zsh-hook chpwd prompt_dotphiles_chpwd
    __PROMPT_dotphiles_VCS_UPDATE=1

    if [[ $TERM = *256color* || $TERM = *rxvt* ]]; then
      prompt_base03="%F{234}"  # brblack base03
      prompt_base02="%F{235}"  # black base02
      prompt_base01="%F{240}"  # brgreen base01
      prompt_base00="%F{241}"  # bryellow base00
      prompt_base0="%F{244}"  # brblue base0
      prompt_base1="%F{245}"  # brcyan base1
      prompt_base2="%F{254}" # white base2
      prompt_base3="%F{230}" # brwhite base3
      prompt_yellow="%F{136}" # yellow yellow
      prompt_orange="%F{166}" # brred orange
      prompt_red="%F{160}" # red red
      prompt_magenta="%F{125}" # magenta magenta
      prompt_violet="%F{61}" # brmagenta violet
      prompt_blue="%F{33}" # blue blue
      prompt_cyan="%F{37}" # cyan cyan
      prompt_green="%F{64}" # green green
    else
      prompt_base03="%B%F{black}"  # brblack base03
      prompt_base02="%b%F{black}"  # black base02
      prompt_base01="%B%F{green}"  # brgreen base01
      prompt_base00="%B%F{yellow}"  # bryellow base00
      prompt_base0="%B%F{blue}"  # brblue base0
      prompt_base1="%B%F{cyan}"  # brcyan base1
      prompt_base2="%b%F{white}" # white base2
      prompt_base3="%B%F{white}" # brwhite base3
      prompt_yellow="%b%F{yellow}" # yellow yellow
      prompt_orange="%B%F{red}" # brred orange
      prompt_red="%b%F{red}" # red red
      prompt_magenta="%b%F{magenta}" # magenta magenta
      prompt_violet="%B%F{magenta}" # brmagenta violet
      prompt_blue="%b%F{blue}" # blue blue
      prompt_cyan="%b%F{cyan}" # cyan cyan
      prompt_green="%b%F{green}" # green green
    fi

    RPROMPT='${editor_info[keymap]}${editor_info[overwrite]}%(?:: %{${prompt_red}%}[$?]%{$prompt_reset%})${VIM:+" %B%{$prompt_green%}V%b%{$prompt_reset%}"}'

    userprompt="❯❯"
    bropen="❮"
    brclose="❯"
    unstaged="✱"
    staged="✚"
    dirty="✭"
    promptahead="⬆ "
    promptbehind="⬇ "
    remotetrack="➜"
    over="♺"
  else
    prompt_base03="$fg_bold[black]"  # brblack base03
    prompt_base02="$fg[black]"  # black base02
    prompt_base01="$fg_bold[green]"  # brgreen base01
    prompt_base00="$fg_bold[yellow]"  # bryellow base00
    prompt_base0="$fg_bold[blue]"  # brblue base0
    prompt_base1="$fg_bold[cyan]"  # brcyan base1
    prompt_base2="$fg[white]" # white base2
    prompt_base3="$fg_bold[white]" # brwhite base3
    prompt_yellow="$fg[yellow]" # yellow yellow
    prompt_orange="$fg_bold[red]" # brred orange
    prompt_red="$fg[red]" # red red
    prompt_magenta="$fg[magenta]" # magenta magenta
    prompt_violet="$fg_bold[magenta]" # brmagenta violet
    prompt_blue="%fg[blue]" # blue blue
    prompt_cyan="$fg[cyan]" # cyan cyan
    prompt_green="$fg[green]" # green green

    RPROMPT=''

    userprompt=">>"
    bropen="("
    brclose=")"
    unstaged="x"
    staged="+"
    dirty="*"
    promptahead="+"
    promptbehind="-"
    remotetrack=">"
    over="O"
  fi
  unset min_zsh_version

  prompt_theme=${1:-'soldark'}
  _prompt_host=${2:-'green'}

  eval prompt_host="$"prompt_$_prompt_host""
  if [ "prompt_theme" = 'sollight' ]; then
    prompt_reset="$prompt_base00"
    prompt_hi="$prompt_base01"
    prompt_dull="$prompt_base1"
    zstyle ':dotzsh:module:editor' completing '%{$prompt_base1%}...%{$prompt_reset%}'
  else
    prompt_reset="$prompt_base0"
    prompt_hi="$prompt_base1"
    prompt_dull="$prompt_base01"
    zstyle ':dotzsh:module:editor' completing '%{$prompt_base01%}...%{$prompt_reset%}'
  fi
  
  # Enable VCS systems you use.
  zstyle ':vcs_info:*' enable git hg svn cvs

  # check-for-changes can be really slow.
  # You should disable it if you work with large repositories.
  zstyle ':vcs_info:(hg*|git*):*' check-for-changes true
  zstyle ':vcs_info:(hg*|git*):*' get-revision true

  zstyle ':vcs_info:git*+set-message:*' hooks git-st git-stash

  # Formats:
  # %b - branchname
  # %u - unstagedstr (see below)
  # %c - stagedstr (see below)
  # %a - action (e.g. rebase-i)
  # %R - repository path
  # %S - path in the repository
  local fmt_branch="%{$prompt_reset%}${bropen}%s:%{$prompt_orange%}%b%{$prompt_reset%}${brclose} %u%c%m"
  local fmt_action="%{$prompt_reset%}${bropen}%{$prompt_yellow%}%a%{$prompt_reset%}${brclose}"
  local fmt_unstaged="%{$prompt_cyan%}${unstaged}%{$prompt_reset%}"
  local fmt_staged="%{$prompt_green%}${staged}%{$prompt_reset%}"

  zstyle ':vcs_info:*:prompt:*' unstagedstr   "${fmt_unstaged}"
  zstyle ':vcs_info:*:prompt:*' stagedstr     "${fmt_staged}"
  zstyle ':vcs_info:*:prompt:*' actionformats "${fmt_branch} ${fmt_action}"
  zstyle ':vcs_info:*:prompt:*' formats       "${fmt_branch}"
  zstyle ':vcs_info:*:prompt:*' nvcsformats   ""

  zstyle ':dotzsh:module:editor:keymap:primary' overwrite " %{$prompt_red%}${over}%{$prompt_reset%}"
  zstyle ':dotzsh:module:editor:keymap' alternate " %{$prompt_yellow%}${bropen}%{$prompt_orange%}${bropen}%{$prompt_red%}${bropen}%{$prompt_reset%}"

  SPROMPT='zsh: correct %{$prompt_red%}%R%{$prompt_reset%} to %{$prompt_green%}%r%{$prompt_reset%} [nyae]? '
  PROMPT='%(!.%U%{$prompt_red%}.%{$prompt_host%})%n%u%{$prompt_hi%} at %{$prompt_host%}%m%{$prompt_hi%} in %{$prompt_dull%}%~ ${vcs_info_msg_0_}
%{$prompt_hi%} ${userprompt} %{$prompt_reset%}'
}

prompt_dotphiles_setup "$@"
